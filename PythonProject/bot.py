import os
import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, PreCheckoutQueryHandler
from PIL import Image, ImageDraw, ImageFilter, ImageEnhance
import io
import asyncio
from datetime import datetime

# –•–æ—Å—Ç–∏–Ω–≥ –±–æ—Ç–∞ –Ω–∞—á–∞–ª–æ
from flask import Flask
import threading

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = threading.Thread(target=run_flask)
flask_thread.daemon = True
flask_thread.start()

# –∫–æ–Ω–µ—Ü —Ö–æ—Å—Ç–∏–Ω–≥ –±–æ—Ç–∞


# === –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê - –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø ===
BOT_TOKEN = "8346872542:AAGlnx0UaOZ0g6fmQDZLc9FL57fBeoiORTE"  # –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
BOT_OWNER_ID = 6523647184  # –í–∞—à Telegram ID (—É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)
PAYMENT_PROVIDER_TOKEN = "7490307358:TEST:CquDfTkRqNzVGqXS"  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
PROCESSING_COST = 35 # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö
# === –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ===

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PaymentSystem:
    def __init__(self):
        self.users_file = "users.json"
        self.load_users()

    def load_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.users_file, 'r', encoding='utf-8') as f:
                self.users = json.load(f)
        except FileNotFoundError:
            self.users = {}

    def save_users(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        with open(self.users_file, 'w', encoding='utf-8') as f:
            json.dump(self.users, f, ensure_ascii=False, indent=2)

    def is_owner(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        return user_id == BOT_OWNER_ID

    def can_process_free(self, user_id):
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"""
        return self.is_owner(user_id)

    def get_user_balance(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        if user_id_str not in self.users:
            self.users[user_id_str] = {
                'balance': 0,
                'processed_count': 0,
                'first_seen': datetime.now().isoformat()
            }
            self.save_users()
        return self.users[user_id_str]['balance']

    def update_balance(self, user_id, amount):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        if user_id_str not in self.users:
            self.users[user_id_str] = {
                'balance': 0,
                'processed_count': 0,
                'first_seen': datetime.now().isoformat()
            }

        self.users[user_id_str]['balance'] += amount
        self.users[user_id_str]['last_activity'] = datetime.now().isoformat()
        self.save_users()

    def increment_processed_count(self, user_id):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user_id_str = str(user_id)
        if user_id_str not in self.users:
            self.users[user_id_str] = {
                'balance': 0,
                'processed_count': 0,
                'first_seen': datetime.now().isoformat()
            }

        self.users[user_id_str]['processed_count'] += 1
        self.users[user_id_str]['last_activity'] = datetime.now().isoformat()
        self.save_users()


class ImageProcessor:
    def __init__(self):
        self.output_width = 1080
        self.output_height = 1920
        self.cropped_width = 1080
        self.cropped_height = 1325

    def enhance_image_quality(self, image):
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –õ–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
        image = image.filter(ImageFilter.GaussianBlur(0.3))

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        image = image.filter(ImageFilter.UnsharpMask(radius=1, percent=150, threshold=3))

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.1)

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
        enhancer = ImageEnhance.Color(image)
        image = enhancer.enhance(1.05)

        return image

    def process_single_cell(self, original_image, rows, cols, cell_index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        cell_width = original_image.width // cols
        cell_height = original_image.height // rows

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
        row = cell_index // cols
        col = cell_index % cols

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        src_x = col * cell_width
        src_y = row * cell_height

        # –í—ã—Ä–µ–∑–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
        cropped_cell = original_image.crop((src_x, src_y, src_x + cell_width, src_y + cell_height))

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        cropped_cell = cropped_cell.resize(
            (self.cropped_width, self.cropped_height),
            Image.Resampling.LANCZOS
        )

        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        cropped_cell = self.enhance_image_quality(cropped_cell)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º
        result_image = Image.new('RGB', (self.output_width, self.output_height), 'black')

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x_position = (self.output_width - self.cropped_width) // 2
        y_position = (self.output_height - self.cropped_height) // 2

        # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result_image.paste(cropped_cell, (x_position, y_position))

        return result_image

    def process_all_cells(self, image_path, rows=3, cols=3):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —è—á–µ–µ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            original_image = Image.open(image_path)

            total_cells = rows * cols
            processed_images = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
            for cell_index in range(total_cells):
                result_image = self.process_single_cell(original_image, rows, cols, cell_index)
                processed_images.append(result_image)

            return processed_images

        except Exception as e:
            logger.error(f"Error processing image: {e}")
            raise

    def create_grid_preview(self, image_path, rows=3, cols=3):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å —Å–µ—Ç–∫–æ–π"""
        try:
            image = Image.open(image_path)
            draw = ImageDraw.Draw(image)

            cell_width = image.width // cols
            cell_height = image.height // rows

            # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
            for i in range(1, cols):
                x = i * cell_width
                draw.line([(x, 0), (x, image.height)], fill='red', width=2)

            for i in range(1, rows):
                y = i * cell_height
                draw.line([(0, y), (image.width, y)], fill='red', width=2)

            # –ù—É–º–µ—Ä—É–µ–º —è—á–µ–π–∫–∏
            for row in range(rows):
                for col in range(cols):
                    cell_num = row * cols + col
                    x = col * cell_width + 10
                    y = row * cell_height + 10
                    draw.text((x, y), str(cell_num + 1), fill='red', stroke_width=2)

            return image

        except Exception as e:
            logger.error(f"Error creating grid preview: {e}")
            raise


class TelegramBot:
    def __init__(self):
        self.token = BOT_TOKEN
        self.processor = ImageProcessor()
        self.payment_system = PaymentSystem()
        self.user_data = {}

    def create_main_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
             InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="buy")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
             InlineKeyboardButton("üìñ –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üì∏ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="process_image")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def create_buy_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("‚≠ê 35 –∑–≤–µ–∑–¥ (1 —Ñ–æ—Ç–æ)", callback_data="buy_35")],
            [InlineKeyboardButton("‚≠ê‚≠ê 70 –∑–≤–µ–∑–¥ (2 —Ñ–æ—Ç–æ)", callback_data="buy_70")],
            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê 105 –∑–≤–µ–∑–¥ (3 —Ñ–æ—Ç–æ)", callback_data="buy_105")],
            [InlineKeyboardButton("üí´ –°–≤–æ—è —Å—É–º–º–∞", callback_data="buy_custom")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def create_settings_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = [
            [InlineKeyboardButton("3√ó3 (9 —Ñ–æ—Ç–æ)", callback_data="grid_3_3")],
            [InlineKeyboardButton("4√ó3 (12 —Ñ–æ—Ç–æ)", callback_data="grid_4_3")],
            [InlineKeyboardButton("4√ó4 (16 —Ñ–æ—Ç–æ)", callback_data="grid_4_4")],
            [InlineKeyboardButton("5√ó5 (25 —Ñ–æ—Ç–æ)", callback_data="grid_5_5")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def create_back_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = self.payment_system.get_user_balance(user_id)

        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞.

üíé **–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ 1 —Ñ–æ—Ç–æ: {PROCESSING_COST} –∑–≤–µ–∑–¥
‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –í–°–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏
‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥

üì∏ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "üì∏ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
3. –ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
        """

        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=self.create_main_keyboard())
        elif update.callback_query:
            await update.callback_query.message.edit_text(welcome_text, reply_markup=self.create_main_keyboard())

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        callback_data = query.data

        if callback_data == "main_menu":
            await self.start(update, context)

        elif callback_data == "balance":
            await self.show_balance(query)

        elif callback_data == "buy":
            await self.show_buy_options(query)

        elif callback_data.startswith("buy_"):
            if callback_data == "buy_custom":
                await self.ask_custom_amount(query)
            else:
                await self.handle_buy_selection(query, callback_data)

        elif callback_data == "settings":
            await self.show_settings(query)

        elif callback_data.startswith("grid_"):
            await self.handle_grid_selection(query, callback_data)

        elif callback_data == "help":
            await self.show_help(query)

        elif callback_data == "process_image":
            await self.request_image(query)

    async def show_balance(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
        user_id = query.from_user.id
        balance = self.payment_system.get_user_balance(user_id)
        processed_count = self.payment_system.users.get(str(user_id), {}).get('processed_count', 0)
        is_owner = self.payment_system.is_owner(user_id)

        balance_text = f"""
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:**

üíé –ó–≤–µ–∑–¥: {balance}
üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ: {processed_count}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {PROCESSING_COST} –∑–≤–µ–∑–¥

{'üéâ –í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞! –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞!' if is_owner else f'–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω—É–∂–Ω–æ: {PROCESSING_COST} –∑–≤–µ–∑–¥'}
        """

        keyboard = [
            [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="buy")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]

        await query.message.edit_text(balance_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

    async def show_buy_options(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        buy_text = f"""
üíé **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

‚Ä¢ ‚≠ê 35 –∑–≤–µ–∑–¥ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ 35 —Ñ–æ—Ç–æ
‚Ä¢ ‚≠ê‚≠ê 70 –∑–≤–µ–∑–¥ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ 70 —Ñ–æ—Ç–æ  
‚Ä¢ ‚≠ê‚≠ê‚≠ê 105 –∑–≤–µ–∑–¥ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ 105 —Ñ–æ—Ç–æ
‚Ä¢ üí´ –°–≤–æ—è —Å—É–º–º–∞ - –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã Telegram Stars!
        """

        await query.message.edit_text(buy_text, reply_markup=self.create_buy_keyboard(), parse_mode='Markdown')

    async def handle_buy_selection(self, query, callback_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        amounts = {
            "buy_35": 35,
            "buy_70": 70,
            "buy_105": 105
        }

        amount = amounts.get(callback_data, 35)
        await self.send_stars_invoice(query, amount)

    async def send_stars_invoice(self, query, amount):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏"""
        user_id = query.from_user.id

        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        title = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} –∑–≤–µ–∑–¥"
        description = f"""
üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ {amount} –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {amount} —Ñ–æ—Ç–æ
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!
        """

        # –î–ª—è –∑–≤–µ–∑–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ —É–º–Ω–æ–∂–µ–Ω–∏—è)
        prices = [LabeledPrice("–ó–≤–µ–∑–¥—ã", amount)]

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏
        payload = f"stars_payment_{user_id}_{amount}"

        # –í–∞–ª—é—Ç–∞ –¥–ª—è –∑–≤–µ–∑–¥
        currency = "XTR"

        try:
            await query.message.reply_invoice(
                title=title,
                description=description,
                payload=payload,
                provider_token=PAYMENT_PROVIDER_TOKEN,
                currency=currency,
                prices=prices,
                need_name=False,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                is_flexible=False,
                max_tip_amount=0
            )
        except Exception as e:
            logger.error(f"Error sending invoice: {e}")
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            await query.message.reply_text(
                f"‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount} –∑–≤–µ–∑–¥:\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé\n"
                f"2. –í—ã–±–µ—Ä–∏—Ç–µ '–î–µ–Ω–µ–∂–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥'\n"
                f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} –∑–≤–µ–∑–¥\n"
                f"4. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                reply_markup=self.create_back_keyboard()
            )

    async def ask_custom_amount(self, query):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""
        custom_text = """
üí´ **–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É**

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 35):

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —á–∞—Ç:
‚ñ´Ô∏è 35 - –¥–ª—è 35 —Ñ–æ—Ç–æ
‚ñ´Ô∏è 70 - –¥–ª—è 70 —Ñ–æ—Ç–æ  
‚ñ´Ô∏è 100 - –¥–ª—è 100 —Ñ–æ—Ç–æ
‚ñ´Ô∏è –ò–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ

–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã.
        """

        await query.message.edit_text(custom_text, reply_markup=self.create_back_keyboard(), parse_mode='Markdown')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        self.user_data[query.from_user.id] = {'waiting_for_amount': True}

    async def handle_custom_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å—É–º–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user_id not in self.user_data or
                not self.user_data[user_id].get('waiting_for_amount')):
            return

        try:
            amount = int(update.message.text.strip())

            if amount < 35:
                await update.message.reply_text(
                    "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 35 –∑–≤–µ–∑–¥\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 35 –∏–ª–∏ –±–æ–ª—å—à–µ:",
                    reply_markup=self.create_back_keyboard()
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã
            await self.send_stars_invoice_custom(update, amount)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_data[user_id]['waiting_for_amount'] = False

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 35, 100, 200",
                reply_markup=self.create_back_keyboard()
            )

    async def send_stars_invoice_custom(self, update: Update, amount: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""
        user_id = update.effective_user.id

        title = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} –∑–≤–µ–∑–¥"
        description = f"""
üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} –∑–≤–µ–∑–¥

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ {amount} –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {amount} —Ñ–æ—Ç–æ
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!
        """

        # –î–ª—è –∑–≤–µ–∑–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ —É–º–Ω–æ–∂–µ–Ω–∏—è)
        prices = [LabeledPrice("–ó–≤–µ–∑–¥—ã", amount)]
        payload = f"stars_payment_custom_{user_id}_{amount}"
        currency = "XTR"

        try:
            await update.message.reply_invoice(
                title=title,
                description=description,
                payload=payload,
                provider_token=PAYMENT_PROVIDER_TOKEN,
                currency=currency,
                prices=prices,
                need_name=False,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                is_flexible=False,
                max_tip_amount=0
            )
        except Exception as e:
            logger.error(f"Error sending custom invoice: {e}")
            await update.message.reply_text(
                f"‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount} –∑–≤–µ–∑–¥:\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé\n"
                f"2. –í—ã–±–µ—Ä–∏—Ç–µ '–î–µ–Ω–µ–∂–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥'\n"
                f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} –∑–≤–µ–∑–¥\n"
                f"4. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                reply_markup=self.create_back_keyboard()
            )

    async def precheckout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.pre_checkout_query
        await query.answer(ok=True)

    async def successful_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            user_id = update.effective_user.id
            payment_info = update.message.successful_payment

            # –î–ª—è –∑–≤–µ–∑–¥ —Å—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –¥–µ–ª–µ–Ω–∏—è)
            stars_amount = payment_info.total_amount

            # –ó–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å
            self.payment_system.update_balance(user_id, stars_amount)
            new_balance = self.payment_system.get_user_balance(user_id)

            success_text = f"""
üí´ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**

‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {stars_amount} –∑–≤–µ–∑–¥
üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∑–≤–µ–∑–¥
üì∏ –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {new_balance // PROCESSING_COST} —Ñ–æ—Ç–æ

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
            """

            await update.message.reply_text(
                success_text,
                reply_markup=self.create_main_keyboard(),
                parse_mode='Markdown'
            )

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            logger.info(f"User {user_id} successfully paid {stars_amount} stars")

        except Exception as e:
            logger.error(f"Payment processing error: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=self.create_main_keyboard()
            )

    async def show_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏"""
        user_id = query.from_user.id
        is_owner = self.payment_system.is_owner(user_id)
        cost_text = "üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (–≤–ª–∞–¥–µ–ª–µ—Ü)" if is_owner else f"üíé {PROCESSING_COST} –∑–≤–µ–∑–¥"

        settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏**

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏:

‚Ä¢ 3√ó3 - 9 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ 4√ó3 - 12 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
‚Ä¢ 4√ó4 - 16 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ 5√ó5 - 25 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_text}
        """

        await query.message.edit_text(settings_text, reply_markup=self.create_settings_keyboard(),
                                      parse_mode='Markdown')

    async def handle_grid_selection(self, query, callback_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∫–∏"""
        grid_sizes = {
            "grid_3_3": (3, 3),
            "grid_4_3": (4, 3),
            "grid_4_4": (4, 4),
            "grid_5_5": (5, 5)
        }

        cols, rows = grid_sizes.get(callback_data, (3, 3))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        self.user_data[user_id]['grid'] = {'cols': cols, 'rows': rows}

        total_images = cols * rows
        is_owner = self.payment_system.is_owner(user_id)
        cost_text = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" if is_owner else f"{PROCESSING_COST} –∑–≤–µ–∑–¥"

        success_text = f"""
‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!

üìê –°–µ—Ç–∫–∞: {cols}√ó{rows}
üì¶ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ: {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost_text}

–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ "üì∏ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!
        """

        keyboard = [
            [InlineKeyboardButton("üì∏ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="process_image")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]
        ]

        await query.message.edit_text(success_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = f"""
üìñ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

1. üíé –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
2. ‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
3. üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
4. ‚ö° –ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏

üíé **–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ 1 —Ñ–æ—Ç–æ: {PROCESSING_COST} –∑–≤–µ–∑–¥
‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞: –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìê **–§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**
‚Ä¢ –†–∞–∑–º–µ—Ä: 1080√ó1920 –ø–∏–∫—Å–µ–ª–µ–π
‚Ä¢ –û–±—Ä–µ–∑–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å: 1080√ó1325 –ø–∏–∫—Å–µ–ª–µ–π
‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: –ø–æ —Ü–µ–Ω—Ç—Ä—É
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: —É–ª—É—á—à–µ–Ω–Ω–æ–µ
        """

        await query.message.edit_text(help_text, reply_markup=self.create_back_keyboard(), parse_mode='Markdown')

    async def request_image(self, query):
        """–ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        user_id = query.from_user.id
        user_balance = self.payment_system.get_user_balance(user_id)
        is_owner = self.payment_system.is_owner(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏
        if user_id in self.user_data and 'grid' in self.user_data[user_id]:
            grid_settings = self.user_data[user_id]['grid']
            cols = grid_settings['cols']
            rows = grid_settings['rows']
            total_images = cols * rows
        else:
            cols, rows = 3, 3
            total_images = 9

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        if not is_owner and user_balance < PROCESSING_COST:
            error_text = f"""
‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥!

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –∑–≤–µ–∑–¥
üíé –¢—Ä–µ–±—É–µ—Ç—Å—è: {PROCESSING_COST} –∑–≤–µ–∑–¥

–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
            """

            keyboard = [
                [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="buy")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]

            await query.message.edit_text(error_text, reply_markup=InlineKeyboardMarkup(keyboard),
                                          parse_mode='Markdown')
            return

        request_text = f"""
üì∏ **–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!**

üìê –°–µ—Ç–∫–∞: {cols}√ó{rows}
üì¶ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ: {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
{'üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (–≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞)' if is_owner else f'üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {PROCESSING_COST} –∑–≤–µ–∑–¥'}

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç!
        """

        await query.message.edit_text(request_text, reply_markup=self.create_back_keyboard(), parse_mode='Markdown')

    async def handle_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            user_id = update.effective_user.id
            user_balance = self.payment_system.get_user_balance(user_id)
            is_owner = self.payment_system.is_owner(user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
            if not is_owner and user_balance < PROCESSING_COST:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥!\n\n"
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –∑–≤–µ–∑–¥\n"
                    f"üíé –¢—Ä–µ–±—É–µ—Ç—Å—è: {PROCESSING_COST} –∑–≤–µ–∑–¥\n\n"
                    f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                    reply_markup=self.create_main_keyboard()
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if user_id in self.user_data and 'grid' in self.user_data[user_id]:
                grid_settings = self.user_data[user_id]['grid']
                cols = grid_settings['cols']
                rows = grid_settings['rows']
            else:
                cols, rows = 3, 3

            total_images = cols * rows

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
            if not is_owner:
                # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.payment_system.update_balance(user_id, -PROCESSING_COST)
                new_balance = self.payment_system.get_user_balance(user_id)

                await update.message.reply_text(
                    f"üíé –°–ø–∏—Å–∞–Ω–æ {PROCESSING_COST} –∑–≤–µ–∑–¥ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
                    f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {new_balance} –∑–≤–µ–∑–¥\n\n"
                    f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
                )
            else:
                await update.message.reply_text("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞)!")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ç–æ–∫
            if total_images > 9:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –°–µ—Ç–∫–∞ {cols}√ó{rows} —Å–æ–∑–¥–∞—Å—Ç {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                    f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
                )

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo_file = await update.message.photo[-1].get_file()
            image_bytes = await photo_file.download_as_bytearray()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            temp_input = f"temp_input_{user_id}.jpg"
            with open(temp_input, 'wb') as f:
                f.write(image_bytes)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å —Å–µ—Ç–∫–æ–π
            await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –ø—Ä–µ–≤—å—é —Å —Å–µ—Ç–∫–æ–π...")
            grid_preview = self.processor.create_grid_preview(temp_input, rows, cols)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é
            temp_preview = f"temp_preview_{user_id}.jpg"
            grid_preview.save(temp_preview, 'JPEG', quality=85)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
            with open(temp_preview, 'rb') as photo:
                cost_text = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" if is_owner else f"–æ–ø–ª–∞—á–µ–Ω–æ {PROCESSING_COST} –∑–≤–µ–∑–¥"
                await update.message.reply_photo(
                    photo=photo,
                    caption=f"üìê –°–µ—Ç–∫–∞: {cols}√ó{rows}\n"
                            f"üì¶ –°–æ–∑–¥–∞—é {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n"
                            f"üíé {cost_text}\n"
                            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–µ–≤—å—é
            os.remove(temp_preview)

            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await self.process_all_images(update, user_id, temp_input, cols, rows, total_images)

        except Exception as e:
            logger.error(f"Image handling error: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                reply_markup=self.create_main_keyboard()
            )

    async def process_all_images(self, update: Update, user_id: int, image_path: str, cols: int, rows: int, total_images: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ—Ç–∫–∏"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            processed_images = self.processor.process_all_cells(image_path, rows, cols)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_msg = await update.message.reply_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é 0/{total_images}...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            sent_count = 0
            for i, image in enumerate(processed_images):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_output = f"temp_output_{user_id}_{i}.jpg"
                image.save(temp_output, 'JPEG', quality=95)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                with open(temp_output, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=f"üñºÔ∏è –Ø—á–µ–π–∫–∞ {i + 1}/{total_images}\n"
                                f"üìê 1080√ó1920 | üéØ 1080√ó1325\n"
                                f"‚≠ê –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(temp_output)

                sent_count += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
                if sent_count % 5 == 0 or sent_count == total_images:
                    await progress_msg.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{total_images}...")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                if sent_count % 3 == 0:
                    await asyncio.sleep(1)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            self.payment_system.increment_processed_count(user_id)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_balance = self.payment_system.get_user_balance(user_id)
            is_owner = self.payment_system.is_owner(user_id)

            final_text = (
                f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                f"üíæ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ\n"
            )

            if not is_owner:
                final_text += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –∑–≤–µ–∑–¥\n"

            final_text += "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"

            await progress_msg.edit_text(final_text, reply_markup=self.create_main_keyboard())

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            os.remove(image_path)

        except Exception as e:
            logger.error(f"Processing all images error: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                reply_markup=self.create_main_keyboard()
            )

            # –û—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                os.remove(image_path)
            except:
                pass

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_custom_amount))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_image))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
        application.add_handler(PreCheckoutQueryHandler(self.precheckout_callback))
        application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.successful_payment_callback))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print(f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {PROCESSING_COST} –∑–≤–µ–∑–¥")
        print(f"üëë –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ (ID: {BOT_OWNER_ID}) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
        print("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

        try:
            application.run_polling()
        except Exception as e:
            logger.error(f"Bot error: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


# –≠—Ç–æ—Ç –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï –∫–ª–∞—Å—Å–∞ TelegramBot
if __name__ == "__main__":
    print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    try:
        bot = TelegramBot()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot.run()

    except Exception as e:

        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
